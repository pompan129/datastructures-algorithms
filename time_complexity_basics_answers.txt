1) What is time complexity and what is its relation to algorithms?
    Time complexity is an expression of the time it takes complete a program. Rather than measure actual physical time, say in seconds,  
    it measure the rate of growth for the number of operations based on the size of the input. The input is usually denoted by the letter ‘n’. 
    Time complexity  is the standard way in which we measure the efficiency of computer algorithms.

2) What is runtime?
    Runtime is often used synonymously with time complexity. It can refer the the actual physical time duration of an algorithm or the rate 
    of growth of operations. 

3) How is the runtime of an algorithm calculated?
    To determine the time complexity of an algorithm, add up how many instructions the algorithm will execute as a function of the size of its 
    input, then simplify the expression to the largest term and drop any constants.

4) Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. 
Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

O(1): Constant
O(log n): Logarithmic 
O(n): Linear  
O(n log n): Log-Linear  
O(n^2): Quadratic 
O(n^3): Cubic Growth Rate       <-- New growth rate
O(2^n):Exponential 


5)Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
    O(n): Linear  : This is like a teacher calling role at the beginning of class. The number of students in the class 
    directly correlates to the number of names she has to call out.

6) Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

This would be a O(n): Linear   algorithm. The number of comparisons is directly related to the number of items in the list. In a worst 
case scenario there would be 100 comparisons in a list of 100 items, 1000 comparisons in a list of 1000 items, etc., etc…

7) Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

This would be a O(n^2): Quadratic  algorithm. “Hello” will be printed exactly n squared times.

8) Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION
This would be a  O(2^n):Exponential  algorithm.  The rate of growth increases very fast.

9) Out of the code snippets you just saw, which is the most time efficient?
    The linear search algorithm is the most efficient out of the three, though it , ironically, is far from the most efficient search
    algorithm.





